using System.Collections.Generic;
using System.Text;
using UnityEngine;

public class MovementCheck : MonoBehaviour
{
    private Vector3 lastPos;
    private List<string> infos;
    private float distance;
    private float maxDistance;
    private MovementManager movementManager;
    private Renderer curRenderer;
    private Material mat;
    private StringBuilder sb = new StringBuilder(50, 50);
    private string m_StringBuildertxt = string.Empty;
    private int r;
    private int g;
    private int b;
    private string droneName;

    private void Awake()
    {
        droneName = name;
        m_StringBuildertxt = sb.GetGarbageFreeString();
        movementManager = GetComponentInParent<MovementManager>();
        if(!movementManager.isWorking)
        return;
        curRenderer = GetComponent<Renderer>();
        if (curRenderer)
        {
            mat = curRenderer.material;
        }
        lastPos = TruncVector3(transform.position);
        infos = new List<string>();
        maxDistance = 0f;


        RecordInfo(lastPos);
    }

    // Update is called once per frame
    void LateUpdate()
    {
        if(!movementManager.isWorking)
        return;
        if (movementManager.GetIsFinished()) // 动画播放完毕或静态画面达到持续时间后则不再进行检测
        {
            return;
        }

        Vector3 curPos = TruncVector3(transform.position);
        distance = Vector3.Distance(curPos, lastPos);

        if (distance > maxDistance)
        {
            maxDistance = distance;
        }

        lastPos = curPos;

        if (distance <= movementManager.GetLimitedSpeed())
        {
            RecordInfo(curPos);
        }
    }

    private void RecordInfo(Vector3 curPos)
    {
        r = Mathf.FloorToInt(mat.color.r * 255);
        g = Mathf.FloorToInt(mat.color.g * 255);
        b = Mathf.FloorToInt(mat.color.b * 255);

        sb.GarbageFreeClear();
        sb.Append(droneName);
        sb.Append("\t");
        sb.Concat(curPos.x, 2);
        sb.Append("\t");
        sb.Concat(-curPos.z, 2); // 统一取相反数
        sb.Append("\t");
        sb.Concat(curPos.y, 2);
        sb.Append("\t");
        sb.Concat(r);
        sb.Append("\t");
        sb.Concat(g);
        sb.Append("\t");
        sb.Concat(b);
        //string s = m_StringBuildertxt;
        infos.Add(m_StringBuildertxt);
    }

    public float GetMaxDistance()
    {
        return maxDistance;
    }

    public List<string> GetInfos()
    {
        return infos;
    }
    string tmp;
    float result;
    private float Trunc(float num)
    {
        num = (float)(long)(num * 100) / 100;
        return num;
    }

    private Vector3 TruncVector3(Vector3 v)
    {
        float x = Trunc(v.x);
        float y = Trunc(v.y);
        float z = Trunc(v.z);

        return new Vector3(x, y, z);
    }
}
